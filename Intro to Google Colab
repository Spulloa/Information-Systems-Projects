{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Spulloa/Information-Systems-Projects/blob/main/Intro%20to%20Google%20Colab\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### READ ME\n",
        "\n",
        "Use the code blocks below to answer each quiz question. Only print the output required for each question. Do not edit the comments at the top of each code cell. Otherwise, the auto-grader may misinterpret your results. See Question 0 as an an example of how to complete a task (leave it in your notebook; don't delete it):"
      ],
      "metadata": {
        "id": "A6E_CTrSJ2bx"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "TfkGxNdSJjhl",
        "outputId": "eb0d4fc6-60d2-433a-fe90-8a78bc7a0c68"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           Col1       Col2       Col3       Col4\n",
              "Row1  Row1/Col1  Row1/Col2  Row1/Col3  Row1/Col4\n",
              "Row2  Row2/Col1  Row2/Col2  Row2/Col3  Row2/Col4\n",
              "Row3  Row3/Col1  Row3/Col2  Row3/Col3  Row3/Col4"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2fde54ab-c430-4213-a36d-7ba8a9522068\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Col1</th>\n",
              "      <th>Col2</th>\n",
              "      <th>Col3</th>\n",
              "      <th>Col4</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Row1</th>\n",
              "      <td>Row1/Col1</td>\n",
              "      <td>Row1/Col2</td>\n",
              "      <td>Row1/Col3</td>\n",
              "      <td>Row1/Col4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Row2</th>\n",
              "      <td>Row2/Col1</td>\n",
              "      <td>Row2/Col2</td>\n",
              "      <td>Row2/Col3</td>\n",
              "      <td>Row2/Col4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Row3</th>\n",
              "      <td>Row3/Col1</td>\n",
              "      <td>Row3/Col2</td>\n",
              "      <td>Row3/Col3</td>\n",
              "      <td>Row3/Col4</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2fde54ab-c430-4213-a36d-7ba8a9522068')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-2fde54ab-c430-4213-a36d-7ba8a9522068 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-2fde54ab-c430-4213-a36d-7ba8a9522068');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 1
        }
      ],
      "source": [
        "# Question 0: Create a DataFrame with three rows and four columns. Name the\n",
        "# columns 'Col1', 'Col2', 'Col3', 'Col4'. Create an index for the DataFrame\n",
        "# and give the rows the index values of 'Row1', 'Row2', 'Row3'. Place a value\n",
        "# in each column equal to the {ColumnName/RowName}. e.g. Col1/Row1. Print\n",
        "# the entire DataFrame.\n",
        "\n",
        "import pandas as pd\n",
        "\n",
        "df = pd.DataFrame(columns=['Col1', 'Col2', 'Col3', 'Col4'], index=['Row1', 'Row2', 'Row3'])\n",
        "\n",
        "for col in df:\n",
        "  for i, value in df[col].items():\n",
        "    df.at[i, col] = f'{i}/{col}'\n",
        "\n",
        "df"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Question 1: Create a variable called age to store the number 38. Create\n",
        "# another variable called name to store the string \"Homer\". Write the coded\n",
        "# needed to print the following dynamic sentence:\n",
        "#\n",
        "# \"My name is [name] and I am [age] years old\"\n",
        "age = 38\n",
        "name = \"Homer\"\n",
        "print(\"My name is \"+ str(name) + \" and I am \" + str(age) + \" years old\")\n"
      ],
      "metadata": {
        "id": "OjD4eRBzJ82x",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "991f46a4-8182-4c3b-84f5-7f90dd4a7890"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "My name is Homer and I am 38 years old\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Question 2: Import the insurance.csv dataset from the following location:\n",
        "# https://www.ishelp.info/data/insurance.csv. Generate a correlation matrix.\n",
        "\n",
        "from google.colab import files\n",
        "uploaded = files.upload()\n"
      ],
      "metadata": {
        "id": "8GC77Dd1KKBu",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "outputId": "e22d28ff-f192-49ce-e9f8-e8ee7a30b6f1"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-29382067-9f0d-4449-8903-c90463197f31\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-29382067-9f0d-4449-8903-c90463197f31\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving insurance.csv to insurance (1).csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import io\n",
        "df = pd.read_csv(io.BytesIO(uploaded['insurance.csv']))\n",
        "\n",
        "corrM = df.corr(numeric_only = True)\n",
        "corrM"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "OWEgTCFJMJdx",
        "outputId": "2fd23a59-0a91-4c15-b356-b60b50a272d6"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               age       bmi  children   charges\n",
              "age       1.000000  0.109272  0.042469  0.299008\n",
              "bmi       0.109272  1.000000  0.012759  0.198341\n",
              "children  0.042469  0.012759  1.000000  0.067998\n",
              "charges   0.299008  0.198341  0.067998  1.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cbd0069a-6bfa-4ce5-8dd8-f763e1653ff2\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>bmi</th>\n",
              "      <th>children</th>\n",
              "      <th>charges</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>age</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.109272</td>\n",
              "      <td>0.042469</td>\n",
              "      <td>0.299008</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>bmi</th>\n",
              "      <td>0.109272</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.012759</td>\n",
              "      <td>0.198341</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>children</th>\n",
              "      <td>0.042469</td>\n",
              "      <td>0.012759</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.067998</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>charges</th>\n",
              "      <td>0.299008</td>\n",
              "      <td>0.198341</td>\n",
              "      <td>0.067998</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cbd0069a-6bfa-4ce5-8dd8-f763e1653ff2')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-cbd0069a-6bfa-4ce5-8dd8-f763e1653ff2 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-cbd0069a-6bfa-4ce5-8dd8-f763e1653ff2');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Question 3: Create a bar chart using the data below:\n",
        "\n",
        "# genre = ['Adventure', 'Action', 'Drama', 'Comedy', 'Thriller/Suspense', 'Horror', 'Romantic Comedy', 'Musical', 'Documentary', 'Black Comedy', 'Western', 'Concert/Performance', 'Multiple Genres', 'Reality']\n",
        "# number_of_movies = [941, 854, 4595, 2125, 942, 509, 548, 149, 1952, 161, 64, 61, 35, 5]\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "genre = ['Adventure', 'Action', 'Drama', 'Comedy', 'Thriller/Suspense', 'Horror', 'Romantic Comedy', 'Musical', 'Documentary', 'Black Comedy', 'Western', 'Concert/Performance', 'Multiple Genres', 'Reality']\n",
        "number_of_movies = [941, 854, 4595, 2125, 942, 509, 548, 149, 1952, 161, 64, 61, 35, 5]\n",
        "\n",
        "plt.bar(genre, number_of_movies)\n",
        "plt.title('Number of Movies')\n",
        "plt.xlabel('Genre')\n",
        "plt.xticks(rotation='vertical')\n",
        "plt.ylabel('Number of Movies')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "vuqdl3d8KWfh",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 605
        },
        "outputId": "2c7b0ce9-fe27-4658-b10e-2b82e725ee5e"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAkQAAAJMCAYAAAAbs7k3AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAACHrElEQVR4nO3ddVhU6fs/8PfQoIQgZQEmYMf60XUtRBBRzLUTcA3sxF070bVrbbFz7cbu7hZFwVXQFRVBJZ/fH/6YryPognLOgOf9uq65LuY5h7nvIWbuec4TKiGEABEREZGC6Wg7ASIiIiJtY0FEREREiseCiIiIiBSPBREREREpHgsiIiIiUjwWRERERKR4LIiIiIhI8VgQERERkeKxICIiIiLFY0FERFpx5MgRqFQqbNq0SdupZEhUVBSaN28OKysrqFQqzJgxQ9sp/adOnTrB0dFR22kQ5QgsiIh+YMHBwVCpVDAyMsI///yT5nitWrVQqlQpLWSW8/Tr1w/79u3D0KFDsXLlStSrV++L56pUKqhUKvj7+6d7/I8//lCf8++//0qVMhFlAgsiIgWIj49HUFCQttPI0Q4dOoRGjRph4MCBaNeuHZydnb96vpGREf7++28kJCSkObZ27VoYGRlJlaraokWLcPfuXcnjEP0IWBARKUC5cuWwaNEiPH36VNupyC4uLi5LHuf58+ewsLDI8Pn16tVDTEwM9uzZo9F+6tQphIWFwdvbO0vy+hp9fX0YGhpKHofoR8CCiEgBfv/9dyQnJ/9nL9GjR4+gUqkQHByc5phKpcKoUaPU90eNGgWVSoV79+6hXbt2MDc3h7W1NYYPHw4hBCIiItCoUSOYmZnBzs4OU6dOTTdmcnIyfv/9d9jZ2SFXrlzw8fFBREREmvPOnj2LevXqwdzcHCYmJqhZsyZOnjypcU5qTrdu3UKbNm2QJ08e/PLLL199zg8fPsSvv/4KS0tLmJiYoEqVKti1a5f6eOplRyEE5s6dq77U9V/y58+PGjVqYM2aNRrtq1evRunSpb94qXLjxo2oWLEijI2NkTdvXrRr107jcueUKVOgUqnw+PHjNN87dOhQGBgY4NWrVwDSH0OUkpKCGTNmoGTJkjAyMoKtrS26du2q/p5UFy5cgKenJ/LmzQtjY2M4OTnB19f3P583UU7FgohIAZycnNChQwdJeolatmyJlJQUBAUF4X//+x/GjRuHGTNmoG7dusifPz8mTZqEokWLYuDAgTh27Fia7x8/fjx27dqFIUOGoHfv3ggJCYG7uzvev3+vPufQoUOoUaMGYmJiMHLkSEyYMAGvX7+Gm5sbzp07l+Yxf/31V7x79w4TJkxAly5dvph7VFQUfv75Z+zbtw89evTA+PHj8eHDB/j4+GDLli0AgBo1amDlypUAgLp162LlypXq+/+lTZs22LFjB2JjYwEASUlJ2LhxI9q0aZPu+cHBwWjRogV0dXUxceJEdOnSBZs3b8Yvv/yC169fAwBatGgBlUqFDRs2pPn+DRs2wMPDA3ny5PliTl27dsWgQYNQrVo1zJw5E507d8bq1avh6emJxMREAB97wzw8PPDo0SMEBgZi9uzZaNu2Lc6cOZOh502UIwki+mEtW7ZMABDnz58XDx48EHp6eqJ3797q4zVr1hQlS5ZU3w8LCxMAxLJly9I8FgAxcuRI9f2RI0cKAOK3335TtyUlJYkCBQoIlUolgoKC1O2vXr0SxsbGomPHjuq2w4cPCwAif/78IiYmRt2+YcMGAUDMnDlTCCFESkqKKFasmPD09BQpKSnq8969eyecnJxE3bp10+TUunXrDP18+vbtKwCI48ePq9vevn0rnJychKOjo0hOTtZ4/gEBARl63NRzo6OjhYGBgVi5cqUQQohdu3YJlUolHj16pM71xYsXQgghEhIShI2NjShVqpR4//69+rF27twpAIgRI0ao26pWrSoqVqyoEfPcuXMCgFixYoW6rWPHjsLBwUF9//jx4wKAWL16tcb37t27V6N9y5Yt6r8bIqVgDxGRQhQuXBjt27fHwoUL8ezZsyx73E9nUunq6qJSpUoQQsDPz0/dbmFhgRIlSuDhw4dpvr9Dhw4wNTVV32/evDns7e2xe/duAMCVK1dw//59tGnTBi9fvsS///6Lf//9F3FxcahTpw6OHTuGlJQUjcfs1q1bhnLfvXs3KleurHFZLXfu3Pjtt9/w6NEj3Lp1K2M/hC/IkycP6tWrh7Vr1wIA1qxZg59//hkODg5pzr1w4QKeP3+OHj16aAy49vb2hrOzs8ZlvJYtW+LixYt48OCBum39+vUwNDREo0aNvpjPxo0bYW5ujrp166p/jv/++y8qVqyI3Llz4/DhwwCgHiu1c+dOda8R0Y+OBRGRggwbNgxJSUlZOuOsUKFCGvfNzc1hZGSEvHnzpmn/fJwKABQrVkzjvkqlQtGiRfHo0SMAwP379wEAHTt2hLW1tcZt8eLFiI+Px5s3bzQew8nJKUO5P378GCVKlEjT7uLioj7+vdq0aYOQkBCEh4dj69atX7xclhorvXycnZ01cvn111+ho6OD9evXAwCEENi4cSO8vLxgZmb2xVzu37+PN2/ewMbGJs3PMjY2Fs+fPwcA1KxZE82aNcPo0aORN29eNGrUCMuWLUN8fPw3/xyIsjs9bSdARPIpXLgw2rVrh4ULFyIwMDDN8S8NFk5OTv7iY+rq6maoDfj4xp1Zqb0/f/75J8qVK5fuOblz59a4b2xsnOk4UvHx8YGhoSE6duyI+Ph4tGjR4rsfM1++fKhevTo2bNiA33//HWfOnEF4eDgmTZr01e9LSUmBjY0NVq9ene5xa2trAFAvmHnmzBns2LED+/btg6+vL6ZOnYozZ86k+XkT/QhYEBEpzLBhw7Bq1ap03zxTB+OmDuBNlRU9JV+S2gOUSgiB0NBQlClTBgBQpEgRAICZmRnc3d2zNLaDg0O66/TcuXNHffx7GRsbo3Hjxli1ahW8vLzS9Jx9mgsA3L17F25ubhrH7t69myaXli1bokePHrh79y7Wr18PExMTNGzY8Ku5FClSBAcOHEC1atUyVDRWqVIFVapUwfjx47FmzRq0bdsW69at++KCk0Q5GS+ZESlMkSJF0K5dOyxYsACRkZEax8zMzJA3b940s8HmzZsnWT4rVqzA27dv1fc3bdqEZ8+ewcvLCwBQsWJFFClSBFOmTFHP1vrUixcvvjl2/fr1ce7cOZw+fVrdFhcXh4ULF8LR0RGurq7f/NifGjhwIEaOHInhw4d/8ZxKlSrBxsYG8+fP17g0tWfPHty+fTvNukXNmjWDrq4u1q5di40bN6JBgwbIlSvXV/No0aIFkpOTMXbs2DTHkpKS1IXwq1ev0vTmpfbO8bIZ/ajYQ0SkQH/88QdWrlyJu3fvomTJkhrH/P39ERQUBH9/f1SqVAnHjh3DvXv3JMvF0tISv/zyCzp37oyoqCjMmDEDRYsWVU+X19HRweLFi+Hl5YWSJUuic+fOyJ8/P/755x8cPnwYZmZm2LFjxzfFDgwMxNq1a+Hl5YXevXvD0tISy5cvR1hYGP7++2/o6GTNZ8ayZcuibNmyXz1HX18fkyZNQufOnVGzZk20bt0aUVFRmDlzJhwdHdGvXz+N821sbFC7dm1MmzYNb9++RcuWLf8zj5o1a6Jr166YOHEirly5Ag8PD+jr6+P+/fvYuHEjZs6ciebNm2P58uWYN28emjRpgiJFiuDt27dYtGgRzMzMUL9+/e/6WRBlVyyIiBSoaNGiaNeuHZYvX57m2IgRI/DixQts2rQJGzZsgJeXF/bs2QMbGxtJcvn9999x7do1TJw4EW/fvkWdOnUwb948mJiYqM+pVasWTp8+jbFjx2LOnDmIjY2FnZ0d/ve//6Fr167fHNvW1hanTp3CkCFDMHv2bHz48AFlypTBjh07ZFlJ+nOdOnWCiYkJgoKCMGTIEOTKlQtNmjTBpEmT0l0lu2XLljhw4ABMTU0zXKjMnz8fFStWxIIFC/D7779DT08Pjo6OaNeuHapVqwbgY+F07tw5rFu3DlFRUTA3N0flypWxevXqDA9YJ8ppVOJbRjkSERER/UA4hoiIiIgUjwURERERKR4LIiIiIlI8FkRERESkeCyIiIiISPFYEBEREZHicR2iDEhJScHTp09hamr6xb2eiIiIKHsRQuDt27fIly/ffy60yoIoA54+fYqCBQtqOw0iIiL6BhEREShQoMBXz2FBlAGmpqYAPv5AzczMtJwNERERZURMTAwKFiyofh//GhZEGZB6mczMzIwFERERUQ6TkeEuHFRNREREiseCiIiIiBSPBREREREpHgsiIiIiUjwWRERERKR4LIiIiIhI8VgQERERkeKxICIiIiLFY0FEREREiseCiIiIiBSPBREREREpHgsiIiIiUjwWRERERKR4LIiIiIhI8VgQERERkeLpaTsBIgBwDNwlS5xHQd6yxCEiopyFPURERESkeCyIiIiISPFYEBEREZHisSAiIiIixWNBRERERIrHgoiIiIgUjwURERERKR4LIiIiIlI8FkRERESkeCyIiIiISPFYEBEREZHisSAiIiIixWNBRERERIrHgoiIiIgUjwURERERKR4LIiIiIlI8FkRERESkeCyIiIiISPFYEBEREZHisSAiIiIixWNBRERERIrHgoiIiIgUjwURERERKR4LIiIiIlI8FkRERESkeCyIiIiISPFYEBEREZHisSAiIiIixWNBRERERIrHgoiIiIgUjwURERERKR4LIiIiIlI8FkRERESkeCyIiIiISPFYEBEREZHisSAiIiIixWNBRERERIrHgoiIiIgUjwURERERKR4LIiIiIlK8bFMQBQUFQaVSoW/fvuq2Dx8+ICAgAFZWVsidOzeaNWuGqKgoje8LDw+Ht7c3TExMYGNjg0GDBiEpKUnjnCNHjqBChQowNDRE0aJFERwcLMMzIiIiopwiWxRE58+fx4IFC1CmTBmN9n79+mHHjh3YuHEjjh49iqdPn6Jp06bq48nJyfD29kZCQgJOnTqF5cuXIzg4GCNGjFCfExYWBm9vb9SuXRtXrlxB37594e/vj3379sn2/IiIiCh703pBFBsbi7Zt22LRokXIkyePuv3NmzdYsmQJpk2bBjc3N1SsWBHLli3DqVOncObMGQDA/v37cevWLaxatQrlypWDl5cXxo4di7lz5yIhIQEAMH/+fDg5OWHq1KlwcXFBz5490bx5c0yfPl0rz5eIiIiyH60XRAEBAfD29oa7u7tG+8WLF5GYmKjR7uzsjEKFCuH06dMAgNOnT6N06dKwtbVVn+Pp6YmYmBjcvHlTfc7nj+3p6al+jPTEx8cjJiZG40ZEREQ/Lj1tBl+3bh0uXbqE8+fPpzkWGRkJAwMDWFhYaLTb2toiMjJSfc6nxVDq8dRjXzsnJiYG79+/h7GxcZrYEydOxOjRo7/5eREREVHOorUeooiICPTp0werV6+GkZGRttJI19ChQ/HmzRv1LSIiQtspERERkYS0VhBdvHgRz58/R4UKFaCnpwc9PT0cPXoUs2bNgp6eHmxtbZGQkIDXr19rfF9UVBTs7OwAAHZ2dmlmnaXe/69zzMzM0u0dAgBDQ0OYmZlp3IiIiOjHpbWCqE6dOrh+/TquXLmivlWqVAlt27ZVf62vr4+DBw+qv+fu3bsIDw9H1apVAQBVq1bF9evX8fz5c/U5ISEhMDMzg6urq/qcTx8j9ZzUxyAiIiLS2hgiU1NTlCpVSqMtV65csLKyUrf7+fmhf//+sLS0hJmZGXr16oWqVauiSpUqAAAPDw+4urqiffv2mDx5MiIjIzFs2DAEBATA0NAQANCtWzfMmTMHgwcPhq+vLw4dOoQNGzZg165d8j5hIiIiyra0Oqj6v0yfPh06Ojpo1qwZ4uPj4enpiXnz5qmP6+rqYufOnejevTuqVq2KXLlyoWPHjhgzZoz6HCcnJ+zatQv9+vXDzJkzUaBAASxevBienp7aeEpERESUDamEEELbSWR3MTExMDc3x5s3bzieSCKOgfL02D0K8pYlDhERaV9m3r+1vg4RERERkbaxICIiIiLFY0FEREREiseCiIiIiBSPBREREREpHgsiIiIiUjwWRERERKR4LIiIiIhI8VgQERERkeKxICIiIiLFY0FEREREiseCiIiIiBSPBREREREpHgsiIiIiUjwWRERERKR4LIiIiIhI8VgQERERkeKxICIiIiLFY0FEREREiseCiIiIiBSPBREREREpHgsiIiIiUjwWRERERKR4LIiIiIhI8VgQERERkeKxICIiIiLFY0FEREREiseCiIiIiBSPBREREREpHgsiIiIiUjwWRERERKR4LIiIiIhI8VgQERERkeKxICIiIiLFY0FEREREiseCiIiIiBSPBREREREpHgsiIiIiUjwWRERERKR4LIiIiIhI8VgQERERkeKxICIiIiLFY0FEREREiseCiIiIiBSPBREREREpHgsiIiIiUjwWRERERKR4LIiIiIhI8VgQERERkeKxICIiIiLFY0FEREREiseCiIiIiBSPBREREREpXqYLooiICDx58kR9/9y5c+jbty8WLlyYpYkRERERySXTBVGbNm1w+PBhAEBkZCTq1q2Lc+fO4Y8//sCYMWOyPEEiIiIiqWW6ILpx4wYqV64MANiwYQNKlSqFU6dOYfXq1QgODs7q/IiIiIgkl+mCKDExEYaGhgCAAwcOwMfHBwDg7OyMZ8+eZW12RERERDLIdEFUsmRJzJ8/H8ePH0dISAjq1asHAHj69CmsrKyyPEEiIiIiqWW6IJo0aRIWLFiAWrVqoXXr1ihbtiwAYPv27epLaUREREQ5iV5mv6FWrVr4999/ERMTgzx58qjbf/vtN5iYmGRpckRERERy+KZ1iIQQuHjxIhYsWIC3b98CAAwMDFgQERERUY6U6R6ix48fo169eggPD0d8fDzq1q0LU1NTTJo0CfHx8Zg/f74UeRIRERFJJtM9RH369EGlSpXw6tUrGBsbq9ubNGmCgwcPZmlyRERERHLIdA/R8ePHcerUKRgYGGi0Ozo64p9//smyxIiIiIjkkukeopSUFCQnJ6dpf/LkCUxNTbMkKSIiIiI5Zbog8vDwwIwZM9T3VSoVYmNjMXLkSNSvXz8rcyMiIiKSRaYLoqlTp+LkyZNwdXXF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IiKSQ6YLosaNG2vc19HRgbW1NWrVqgVnZ+esyouIiIhINpkuiEaOHClFHkRERERaw4UZiYiISPEy3EOko6Pz1QUZAUClUiEpKem7kyIiIiKSU4YLoi1btnzx2OnTpzFr1iykpKRkSVJEREREcspwQdSoUaM0bXfv3kVgYCB27NiBtm3bYsyYMVmaHBEREZEcvmkM0dOnT9GlSxeULl0aSUlJuHLlCpYvXw4HB4eszo+IiIhIcpkqiN68eYMhQ4agaNGiuHnzJg4ePIgdO3agVKlSUuVHREREJLkMXzKbPHkyJk2aBDs7O6xduzbdS2hEREREOVGGC6LAwEAYGxujaNGiWL58OZYvX57ueZs3b86y5IiIiIjkkOGCqEOHDv857Z6IiIgoJ8pwQRQcHCxhGkRERETaw5WqiYiISPFYEBEREZHisSAiIiIixWNBRERERIrHgoiIiIgUjwURERERKR4LIiIiIlI8FkRERESkeCyIiIiISPFYEBEREZHisSAiIiIixWNBRERERIrHgoiIiIgUjwURERERKR4LIiIiIlI8FkRERESkeCyIiIiISPFYEBEREZHisSAiIiIixWNBRERERIrHgoiIiIgUjwURERERKR4LIiIiIlI8FkRERESkeCyIiIiISPFYEBEREZHisSAiIiIixWNBRERERIrHgoiIiIgUjwURERERKR4LIiIiIlI8FkRERESkeCyIiIiISPFYEBEREZHisSAiIiIixWNBRERERIrHgoiIiIgUjwURERERKR4LIiIiIlI8FkRERESkeFotiI4dO4aGDRsiX758UKlU2Lp1q8ZxIQRGjBgBe3t7GBsbw93dHffv39c4Jzo6Gm3btoWZmRksLCzg5+eH2NhYjXOuXbuG6tWrw8jICAULFsTkyZOlfmpERESUg2i1IIqLi0PZsmUxd+7cdI9PnjwZs2bNwvz583H27FnkypULnp6e+PDhg/qctm3b4ubNmwgJCcHOnTtx7Ngx/Pbbb+rjMTEx8PDwgIODAy5evIg///wTo0aNwsKFCyV/fkRERJQz6GkzuJeXF7y8vNI9JoTAjBkzMGzYMDRq1AgAsGLFCtja2mLr1q1o1aoVbt++jb179+L8+fOoVKkSAGD27NmoX78+pkyZgnz58mH16tVISEjA0qVLYWBggJIlS+LKlSuYNm2aRuFEREREypVtxxCF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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "2gcIv_HxKwEI"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}